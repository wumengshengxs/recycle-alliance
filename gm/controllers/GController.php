<?php
namespace gm\controllers;

use gm\models\SystemRegion;
use yii;
use PHPExcel;
use PHPExcel_IOFactory;
use PHPExcel_Style_Alignment;
use yii\web\Controller;

class GController extends Controller{

    protected $user;
    protected $agent_id;
    protected $user_admin;

    public function init(){
        parent::init(); // TODO: Change the autogenerated stub
        if(!empty(yii::$app->user->identity->attributes)) {
            $this->user = yii::$app->user->identity->attributes;
            //指定代理商管理员的agent_id
            $this->user['admin'] && $this->agent_id = yii::$app->user->id;
            //agent_id为0则表示全局管理员
            !$this->user['admin'] && $this->agent_id = 0;
            $this->user_admin = $this->user['admin'];
        }
    }

    public function getAgent(){
        return yii::$app->user->identity->attributes;
    }

    /**
     * 单元测试
     */
    public function actionFind_where_one(){
        $this->getAgent();
        $where = ['type' => 1];
        $like = ['LIKE', 'phone_num', '13%', false];
        $comparison = ['>', 'id', 22];
        $res = $this->findWhereOne('SrRecycler',$where);
        echo "<pre>";
        print_r($res);exit;
    }

    /**
     * 单元测试
     */
    public function actionFind_where_all(){
        $this->getAgent();
        $where = ['type' => 1];
        $like = ['LIKE', 'phone_num', '13%', false];
        $comparison = ['>', 'id', 22];
        $res = $this->findWhereAll('SrRecycler',$where, $like, $comparison);
        echo "<pre>";
        print_r($res);exit;
    }

    public function post($key = ''){
        empty($key) && $res = \Yii::$app->request->post();
        empty($key) || $res = \Yii::$app->request->post($key);
        return $res;
    }

    public function get($key = ''){
        empty($key) && $res = \Yii::$app->request->get();
        empty($key) || $res = \Yii::$app->request->get($key);
        return $res;
    }

    public function getConnect(){
        return \Yii::$app->db;
    }

    /**
     * @param $class model类名称
     * @param array $where 查询条件 例如 name = '张三' 或者 id = 3
     * @param array $like 模糊查询条件 例如 title like '我是谁' 或者 title like '我是谁%'
     * @param array $comparison 大小或不等于查询 例如 age > 30 或者 class <= 5 或者 name <> '张三'
     * @return mixed
     * 备注 查询表结构中必须包含字段agent_id
     */
    public function findWhereAll($class, $where = [], $like = [], $comparison = []){
        $model = 'gm\models\\' . $class;
        $find = $model::find();
        if($this->agent_id > 0){
            $find->where(['agent_id' => $this->agent_id]);
        }
        if($where){
            $find->andWhere($where);
        }
        if($like){
            $find->andWhere($like);
        }
        if($comparison){
            $find->andWhere($comparison);
        }
        return $find->asArray()->all();
    }

    /**
     * @param $class model类名称
     * @param array $where 查询条件
     * @param bool $is_array 是否返回数组结构 true为数组 false为对象 默认true
     * @return mixed
     */
    public function findWhereOne($class, $where = [], $is_array = true){
        $model = 'gm\models\\' . $class;
        $find = $model::find()->where($where);
        if($is_array){
            return $find->asArray()->one();
        }
        return $find->one();
    }

    /**
     * 数据导出
     * @param array $title   标题行名称
     * @param array $data   导出数据
     * @param string $fileName 文件名
     * @param string $savePath 保存路径
     * @param $type   是否下载  false--保存   true--下载
     * @return string   返回文件全路径
     * @throws PHPExcel_Exception
     * @throws PHPExcel_Reader_Exception
     */
    function exportExcel($title = [], $data = [], $fileName = '', $savePath = './', $isDown = true){
        $obj = new PHPExcel();

        //横向单元格标识
        $cellName = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'AA', 'AB', 'AC', 'AD', 'AE', 'AF', 'AG', 'AH', 'AI', 'AJ', 'AK', 'AL', 'AM', 'AN', 'AO', 'AP', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AV', 'AW', 'AX', 'AY', 'AZ');
        //设置sheet名称
        $obj->getActiveSheet(0)->setTitle('sheet1');
        //单元格居中
        $obj->getDefaultStyle()->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_CENTER);
        $obj->getDefaultStyle()->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_CENTER);

        //设置纵向单元格标识
        $_row = 1;
        if($title){
            $_cnt = count($title);
            //合并单元格
            $obj->getActiveSheet(0)->mergeCells('A'.$_row.':'.$cellName[$_cnt-1].$_row);
            //设置合并后的单元格内容
            $obj->setActiveSheetIndex(0)->setCellValue('A'.$_row, $fileName . '(' .date('Y-m-d H:i:s') .')');
            $_row++;
            $i = 0;
            //设置列标题
            foreach($title AS $v){
                $obj->setActiveSheetIndex(0)->setCellValue($cellName[$i].$_row, $v);
                $obj->getActiveSheet()->getColumnDimension($cellName[$i])->setWidth(40);
                $obj->getActiveSheet()->getDefaultRowDimension()->setRowHeight(30);
                $i++;
            }
            $_row++;
        }

        //填写数据
        if($data){
            $i = 0;
            foreach($data AS $_v){
                $j = 0;
                foreach($_v AS $_cell){
                    $obj->getActiveSheet(0)->setCellValue($cellName[$j] . ($i+$_row), $_cell);
                    $j++;
                }
                $i++;
            }
        }

        //文件名处理
        if(!$fileName){
            $fileName = uniqid(time(),true);
        }
        $objWrite = PHPExcel_IOFactory::createWriter($obj, 'Excel2007');
        //网页下载
        if($isDown){
            header('pragma:public');
            header("Content-Disposition:attachment;filename=$fileName.xlsx");
            $objWrite->save('php://output');exit;
        }

        $_fileName = iconv("utf-8", "gb2312", $fileName);   //转码
        $_savePath = $savePath.$_fileName.'.xlsx';
        $objWrite->save($_savePath);
        return $savePath.$fileName.'.xlsx';
    }

    public function show_can_name($can_name) {
        if (strpos($can_name,'1') !== false) {
            $can_name = str_replace("1","回收箱-1号箱", $can_name);
        } elseif (strpos($can_name,'2') !== false) {
            $can_name = str_replace("2","回收箱-2号箱", $can_name);
        } else {
            $can_name = $can_name . "回收箱";
        }
        return $can_name;
    }

    /**
     * 省市区获取
     */
    public function actionRegion(){
        //设置区域查询入参条件
        $id = yii::$app->request->get('pid');

        //组装where条件
        $where = [];
        empty($id) ? $where['pid'] = 0 : $where['pid'] = $id;

        //查询对应的
        $systemRegion = SystemRegion::find()
            ->where($where)->asArray()->all();

        return json_encode($systemRegion);
    }

    /**
     * 腾讯地图省市区获取
     */
    public function actionRegion_tx(){
        $pid = yii::$app->request->get('pid');
        $type = yii::$app->request->get('type');

        //直辖市与特别行政区市级显示
        if($type == 'city' && in_array($pid, ['110000','310000','120000','500000','810000','820000'])){
            $region = [];
            switch ($pid){
                case 110000:
                    array_push($region, ['id' => $pid, 'fullname' => '北京市']);
                    break;
                case 310000:
                    array_push($region, ['id' => $pid, 'fullname' => '上海市']);
                    break;
                case 120000:
                    array_push($region, ['id' => $pid, 'fullname' => '天津市']);
                    break;
                case 500000:
                    array_push($region, ['id' => $pid, 'fullname' => '重庆市']);
                    break;
                case 810000:
                    array_push($region, ['id' => $pid, 'fullname' => '香港特别行政区']);
                    break;
                case 820000:
                    array_push($region, ['id' => $pid, 'fullname' => '澳门特别行政区']);
                    break;
            }
            return json_encode($region);
        }
        //腾讯地图API所需要的key
        $key = 'WZYBZ-7CO6D-2K44L-HCQ2N-BYDYQ-U2BSM';
        $param = 'key=' . $key;
        empty($pid) || $param .= '&id=' . $pid;
        $url = 'https://apis.map.qq.com/ws/district/v1/getchildren?'.$param;
        $response = @file_get_contents($url); //调取腾讯API
        $response = json_decode($response, 1);
        $region = $response['result'][0];
        return json_encode($region);
    }

    /**
     * 省市区获取
     * $type province省|city市|district区/县
     * 接口请求地址：http://datavmap-public.oss-cn-hangzhou.aliyuncs.com/areas/csv/{$adcode}_{$type}.json
     * $adcode:省/市/区县编号
     * $type: province|city|district
     * 全国省编号为100000
     */
    public function actionRegion_ali(){
        //设置区域查询入参条件
        $adcode = yii::$app->request->get('adcode');
        $type = yii::$app->request->get('type');
        empty($adcode) && $adcode = '100000';
        empty($type) && $type = 'province';

        //查询阿里云省市区接口
        $region = @file_get_contents("http://datavmap-public.oss-cn-hangzhou.aliyuncs.com/areas/csv/{$adcode}_{$type}.json");
        $region = json_decode($region, 1);

        if(empty($region)){
            return json_encode([]);
        }

        //数据过滤
        foreach ($region['rows'] as $k => $v){
            //过滤掉不可能的区县
            if($type == 'district' && (($v['adcode'] - $adcode) > 100 || ($v['adcode'] - $adcode) < 0)){
                unset($region['rows'][$k]);
            }
        }

        //数据排序
        $region = array_sort($region['rows'], 'adcode', SORT_ASC);
        return json_encode($region);
    }

    /**
     * 获取页码与数据长度
     * @return array
     */
    public function getOffset()
    {
        $start  = empty($_GET['start']) ? 0 : $_GET['start'];
        $length = empty($_GET['length']) ? 10 : $_GET['length'];
        $offset = [$start ,$length];

        return $offset;
    }

    /**
     * 返回值封装
     * @param $code
     * @param $msg
     * @param null $data
     * @return mixed
     */
    public function AjaxResult($code,$msg,$data = null)
    {
        $result['status'] = $code;
        $msg ? $result['msg'] = $msg : null;
        $data != null ? $result['data'] = $data : null;

        return json_encode($result);
    }

}